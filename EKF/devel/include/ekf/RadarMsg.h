// Generated by gencpp from file ekf/RadarMsg.msg
// DO NOT EDIT!


#ifndef EKF_MESSAGE_RADARMSG_H
#define EKF_MESSAGE_RADARMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ekf
{
template <class ContainerAllocator>
struct RadarMsg_
{
  typedef RadarMsg_<ContainerAllocator> Type;

  RadarMsg_()
    : id(0)
    , timestamp(0)
    , rho(0.0)
    , theta(0.0)
    , rho_dot(0.0)  {
    }
  RadarMsg_(const ContainerAllocator& _alloc)
    : id(0)
    , timestamp(0)
    , rho(0.0)
    , theta(0.0)
    , rho_dot(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _timestamp_type;
  _timestamp_type timestamp;

   typedef float _rho_type;
  _rho_type rho;

   typedef float _theta_type;
  _theta_type theta;

   typedef float _rho_dot_type;
  _rho_dot_type rho_dot;





  typedef boost::shared_ptr< ::ekf::RadarMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ekf::RadarMsg_<ContainerAllocator> const> ConstPtr;

}; // struct RadarMsg_

typedef ::ekf::RadarMsg_<std::allocator<void> > RadarMsg;

typedef boost::shared_ptr< ::ekf::RadarMsg > RadarMsgPtr;
typedef boost::shared_ptr< ::ekf::RadarMsg const> RadarMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ekf::RadarMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ekf::RadarMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ekf::RadarMsg_<ContainerAllocator1> & lhs, const ::ekf::RadarMsg_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.timestamp == rhs.timestamp &&
    lhs.rho == rhs.rho &&
    lhs.theta == rhs.theta &&
    lhs.rho_dot == rhs.rho_dot;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ekf::RadarMsg_<ContainerAllocator1> & lhs, const ::ekf::RadarMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ekf

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ekf::RadarMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ekf::RadarMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ekf::RadarMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ekf::RadarMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ekf::RadarMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ekf::RadarMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ekf::RadarMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e7eb33843a766aff55213f894eae217e";
  }

  static const char* value(const ::ekf::RadarMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe7eb33843a766affULL;
  static const uint64_t static_value2 = 0x55213f894eae217eULL;
};

template<class ContainerAllocator>
struct DataType< ::ekf::RadarMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ekf/RadarMsg";
  }

  static const char* value(const ::ekf::RadarMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ekf::RadarMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"int32 timestamp\n"
"float32 rho\n"
"float32 theta\n"
"float32 rho_dot\n"
;
  }

  static const char* value(const ::ekf::RadarMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ekf::RadarMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.timestamp);
      stream.next(m.rho);
      stream.next(m.theta);
      stream.next(m.rho_dot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ekf::RadarMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ekf::RadarMsg_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "timestamp: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "rho: ";
    Printer<float>::stream(s, indent + "  ", v.rho);
    s << indent << "theta: ";
    Printer<float>::stream(s, indent + "  ", v.theta);
    s << indent << "rho_dot: ";
    Printer<float>::stream(s, indent + "  ", v.rho_dot);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EKF_MESSAGE_RADARMSG_H
